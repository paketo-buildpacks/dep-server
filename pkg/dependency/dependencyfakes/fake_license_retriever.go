// Code generated by counterfeiter. DO NOT EDIT.
package dependencyfakes

import (
	"sync"

	"github.com/paketo-buildpacks/dep-server/pkg/dependency"
)

type FakeLicenseRetriever struct {
	LookupLicensesStub        func(string, string) ([]string, error)
	lookupLicensesMutex       sync.RWMutex
	lookupLicensesArgsForCall []struct {
		arg1 string
		arg2 string
	}
	lookupLicensesReturns struct {
		result1 []string
		result2 error
	}
	lookupLicensesReturnsOnCall map[int]struct {
		result1 []string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeLicenseRetriever) LookupLicenses(arg1 string, arg2 string) ([]string, error) {
	fake.lookupLicensesMutex.Lock()
	ret, specificReturn := fake.lookupLicensesReturnsOnCall[len(fake.lookupLicensesArgsForCall)]
	fake.lookupLicensesArgsForCall = append(fake.lookupLicensesArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("LookupLicenses", []interface{}{arg1, arg2})
	fake.lookupLicensesMutex.Unlock()
	if fake.LookupLicensesStub != nil {
		return fake.LookupLicensesStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.lookupLicensesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeLicenseRetriever) LookupLicensesCallCount() int {
	fake.lookupLicensesMutex.RLock()
	defer fake.lookupLicensesMutex.RUnlock()
	return len(fake.lookupLicensesArgsForCall)
}

func (fake *FakeLicenseRetriever) LookupLicensesCalls(stub func(string, string) ([]string, error)) {
	fake.lookupLicensesMutex.Lock()
	defer fake.lookupLicensesMutex.Unlock()
	fake.LookupLicensesStub = stub
}

func (fake *FakeLicenseRetriever) LookupLicensesArgsForCall(i int) (string, string) {
	fake.lookupLicensesMutex.RLock()
	defer fake.lookupLicensesMutex.RUnlock()
	argsForCall := fake.lookupLicensesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeLicenseRetriever) LookupLicensesReturns(result1 []string, result2 error) {
	fake.lookupLicensesMutex.Lock()
	defer fake.lookupLicensesMutex.Unlock()
	fake.LookupLicensesStub = nil
	fake.lookupLicensesReturns = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeLicenseRetriever) LookupLicensesReturnsOnCall(i int, result1 []string, result2 error) {
	fake.lookupLicensesMutex.Lock()
	defer fake.lookupLicensesMutex.Unlock()
	fake.LookupLicensesStub = nil
	if fake.lookupLicensesReturnsOnCall == nil {
		fake.lookupLicensesReturnsOnCall = make(map[int]struct {
			result1 []string
			result2 error
		})
	}
	fake.lookupLicensesReturnsOnCall[i] = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeLicenseRetriever) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.lookupLicensesMutex.RLock()
	defer fake.lookupLicensesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeLicenseRetriever) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ dependency.LicenseRetriever = new(FakeLicenseRetriever)
